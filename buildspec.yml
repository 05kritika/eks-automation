version: 0.2

#env:
#  variables:
#    key: "value"
#    key: "value"

phases:
  install:
    commands:
      
      - "apt update"
      - "apt install -y awscli git python3"
     # - "apt install -y awscli"
      - "which aws"
      - "aws --version"
      - "curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/aws-iam-authenticator"
      - "curl -o aws-iam-authenticator.sha256 https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/aws-iam-authenticator.sha256"
      - "openssl sha1 -sha256 aws-iam-authenticator"
      - "chmod +x ./aws-iam-authenticator"
      - "mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin"
      - "echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc"
      - "aws-iam-authenticator help"
      
     # - "pip install kubernetes"
     # - "wget https://github.com/kubernetes/kops/releases/download/1.8.0/kops-linux-amd64"
     # - "chmod +x kops-linux-amd64"
     # - "mv kops-linux-amd64 /usr/local/bin/kops"
      
      - "curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      - "chmod +x kubectl"
      - "mv ./kubectl /usr/local/bin/kubectl"
      #- "kubectl version"
      
      - "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3"
      - "chmod 700 get_helm.sh"
      - "./get_helm.sh"
      - "helm version"

     # - "wget https://storage.googleapis.com/kubernetes-helm/helm-v2.8.2-linux-amd64.tar.gz -O helm.tar.gz; tar -xzf helm.tar.gz"
     # - "chmod +x ./linux-amd64/helm"
     # - "mv ./linux-amd64/helm /usr/local/bin/helm"
       
      - sudo pip install boto3
      - wget https://releases.hashicorp.com/terraform/0.12.26/terraform_0.12.26_linux_amd64.zip
      #- wget https://releases.hashicorp.com/terraform/0.10.4/terraform_0.10.4_linux_amd64.zip
      - unzip terraform_0.12.26_linux_amd64.zip
      - sudo mv terraform /bin
      - rm terraform_0.12.26_linux_amd64.zip
      - apt-get update
      - apt-cache search source
      - apt-get install -y curl jq
      - curl 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI | jq 'to_entries | [ .[] | select(.key | (contains("Expiration") or contains("RoleArn"))  | not) ] |  map(if .key == "AccessKeyId" then . + {"key":"AWS_ACCESS_KEY_ID"} else . end) | map(if .key == "SecretAccessKey" then . + {"key":"AWS_SECRET_ACCESS_KEY"} else . end) | map(if .key == "Token" then . + {"key":"AWS_SESSION_TOKEN"} else . end) | map("export \(.key)=\(.value)") | .[]' -r > /tmp/aws_cred_export.txt # work around https://github.com/hashicorp/terraform/issues/8746
      
      - echo "Prepare terraform file"
      - cd eks-terraform 
      - pwd
      #- terraform init
      #- terraform plan
      #- terraform apply
      
      - . /tmp/aws_cred_export.txt && terraform init
     # - terraform plan 
     
      
  build:
    commands:
      #- terraform apply -input=false -auto-approve
      #- terraform destroy -input=false -auto-approve
      - . /tmp/aws_cred_export.txt &&  python runterraform.js.py $region $applicationname $apply $destroy
      - echo "Post apply build"
  post_build:
    commands:
      #- echo "Nothing to do in the post_build for now"
      
      
     # - aws sts assume-role --role-arn "arn:aws:iam::847370586410:role/assume-admin-role" --role-session-name AWSCLI-Session
     # - aws sts get-caller-identity
      
      - . /tmp/aws_cred_export.txt && aws eks --region us-east-1 update-kubeconfig --name $(terraform output cluster_name)
      - kubectl version
      - kubectl get nodes
      
      - echo "install istio"
      #- kubectl get nodes
      - export ISTIO_VERSION=1.4.3
      - echo "download istio"
      - curl -L https://git.io/getLatestIstio | ISTIO_VERSION=${ISTIO_VERSION} sh -
      - echo "change directory"
      - cd istio-${ISTIO_VERSION}
      - export PATH=${PWD}/bin:$PATH
      - kubectl apply -f install/kubernetes/helm/istio-init/files
      - sleep 20s
      - kubectl apply -f install/kubernetes/istio-demo.yaml
      - sleep 1m 
      - kubectl get pods -n istio-system
      - kubectl label namespace default istio-injection=enable
      - kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
      - sleep 30s
      - kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
      - kubectl get svc istio-ingressgateway -n istio-system 
      - sleep 30
     
      - pwd
      - cd ..
      - pwd
      #- cd eks-terraform
      #- pwd
      
      - helm repo add stable https://kubernetes-charts.storage.googleapis.com
      - helm repo update
      - helm install my-jenkins -f jenkins-values.yaml stable/jenkins --set 'service.type=LoadBalancer'
      - helm ls
   #   
   #   - sleep 60
      
      - kubectl get pods
      - kubectl get svc
      - printf $(kubectl get secret --namespace default my-jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo
      
      #- sleep 30
      
      #- helm repo add bitnami https://charts.bitnami.com/bitnami
      #- helm install my-tomcat bitnami/tomcat
      #- helm ls
      
      #- sleep 30
      
    #  - kubectl get pods
     # - kubectl get svc
     
      - kubectl create namespace monitoring
      - helm install -f prometheus-values.yaml prometheus stable/prometheus --namespace monitoring
      - helm ls --namespace monitoring
      
      - kubectl get pods --namespace monitoring
      - kubectl get svc --namespace monitoring
      
      - sleep 60
     
     # - kubectl get pods --namespace monitoring
      - kubectl get svc --namespace monitoring
      
     # - sleep 30
      
      #- kubectl get pods --namespace monitoring
      - kubectl get svc --namespace monitoring
      
     # - sleep 60 
      - export SERVICE_IP=$(kubectl get svc --namespace default my-jenkins --template "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}")
      - echo $SERVICE_IP
      
      - export PROMETHEUS_LB=$(kubectl get svc --namespace monitoring prometheus-server --template "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}")
    #  - export PROMETHEUS_LB=$(kubectl get svc --namespace monitoring prometheus-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
   #   - export PROMETHEUS_LB=$(kubectl get svc --namespace monitoring prometheus-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      - echo $PROMETHEUS_LB
      
     # - sleep 60
      
     # - echo $PROMETHEUS_LB
      #
     # - kubectl get pods --namespace monitoring
      - kubectl get svc --namespace monitoring
      
      - sed -i.bak 's/PROMETHEUS_LB/'$PROMETHEUS_LB'/' grafana-values.yaml | helm install -f grafana-values.yaml grafana stable/grafana --namespace monitoring
  #    - sed -i.bak 's/PROMETHEUS_LB/'$PROMETHEUS_LB'/' grafana-values.yaml | helm upgrade --reuse-values -f grafana-values.yaml grafana stable/grafana --namespace monitoring
     
      - helm ls --namespace monitoring
      
      - kubectl get pods --namespace monitoring
      - kubectl get svc --namespace monitoring
   #   
      - sleep 60
      
   #   - kubectl get pods --namespace monitoring
      - kubectl get svc --namespace monitoring
      
      - sleep 30
      
    #  - kubectl get pods --namespace monitoring
      - kubectl get svc --namespace monitoring
      
      
