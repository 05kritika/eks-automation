version: 0.2

env:
  variables:
    Helm: "Yes"
#    key: "value"

phases:
  install:
    commands:
      
      ## INSTALLING AWS CLI, GIT AND PYTHON3 ##
      
      - "apt update"
      - "apt install -y awscli git python3"
      - "which aws"
      - "aws --version"
      
      ## INSTALLING AWS IAM AUTHENTICATOR ##
      
      - "curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/aws-iam-authenticator"
      - "curl -o aws-iam-authenticator.sha256 https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/aws-iam-authenticator.sha256"
      - "openssl sha1 -sha256 aws-iam-authenticator"
      - "chmod +x ./aws-iam-authenticator"
      - "mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin"
      - "echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc"
      - "aws-iam-authenticator help"
      
      ## INSTALLING KOPS ##
      
     # - "pip install kubernetes"
     # - "wget https://github.com/kubernetes/kops/releases/download/1.8.0/kops-linux-amd64"
     # - "chmod +x kops-linux-amd64"
     # - "mv kops-linux-amd64 /usr/local/bin/kops"
      
      ## INSTALLING KUBECTL COMAND LINE TOOL ##
      
      - "echo 'Kubectl Installation Started' "
      - "curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      - "chmod +x kubectl"
      - "mv ./kubectl /usr/local/bin/kubectl"
      
      ## INSTALLING HELM ##
      
      - "echo 'Helm Installation Started' "
      - "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3"
      - "chmod 700 get_helm.sh"
      - "./get_helm.sh"
      - "helm version"
      
      - "sudo pip install boto3"

       ## INSTALLING TERRAFORM ##

      - "echo 'Terraform Installation Started' "
      - "wget https://releases.hashicorp.com/terraform/0.12.26/terraform_0.12.26_linux_amd64.zip"
      - "unzip terraform_0.12.26_linux_amd64.zip"
      - "sudo mv terraform /bin"
      - "rm terraform_0.12.26_linux_amd64.zip"
      - "terraform --version"
      
      - apt-get update
      - apt-cache search source
      - apt-get install -y curl jq
      - curl 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI | jq 'to_entries | [ .[] | select(.key | (contains("Expiration") or contains("RoleArn"))  | not) ] |  map(if .key == "AccessKeyId" then . + {"key":"AWS_ACCESS_KEY_ID"} else . end) | map(if .key == "SecretAccessKey" then . + {"key":"AWS_SECRET_ACCESS_KEY"} else . end) | map(if .key == "Token" then . + {"key":"AWS_SESSION_TOKEN"} else . end) | map("export \(.key)=\(.value)") | .[]' -r > /tmp/aws_cred_export.txt # work around https://github.com/hashicorp/terraform/issues/8746
      
      - "echo 'Installation Phase Completed!!' "
     
  build:
    commands:
     
      - "echo 'Entering in Build Phase: Infrastructure Provisioning using Terraform' "
      
      - "echo 'Prepare terraform file' "
      - "cd eks-terraform "
      - "pwd"
      - ". /tmp/aws_cred_export.txt && terraform init"
      #- "terraform plan "
      - ". /tmp/aws_cred_export.txt &&  python runterraform.js.py $Region $Applicationname $Apply $Destroy"
      
      - "echo 'Infrastructure Provisioned Successfully' "
      
  post_build:
    commands:
  #    - echo "Nothing to do in the post_build for now"
      
     
